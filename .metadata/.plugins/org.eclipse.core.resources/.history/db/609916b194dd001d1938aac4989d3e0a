package com.tjoeun.bookshop;

import java.util.Arrays;


//	여러 권의 책 정보(BookVO 클래스)를 기억하는 클래스
public class BookList {

//	1. 필드 선언
	private BookVO[] bookList; // 여러 권의 책 정보를 기억할 배열을 선언만 한다. => null로 초기화된다.
	private int size; // 배열의 크기
	private int index; //배열의 인덱스, 배열에 저장된 데이터의 개수
	
	
//	2. 생성자 선언
//	기본 생성자로 객체를 생성하면 10권의 책 정보를 기억할 수 있는 배열을 만들고 배열의 크기를 넘겨받는
//	생성자가 실행되면 인수로 넘겨받은 크기만큼의 크기를 가지는 배열을 만든다.
	public BookList() {
//		10권의 책 정보를 기억할 수 있는 배열을 만든다.
//		size = 10;
//		bookList = new BookVO[size];
		this(10);
	}


	public BookList(int size) {
//	생성자의 인수로 넘겨받은 size개 만큼의 책 정보를 기억할 수 있는 배열을 만든다.
		super();
		this.size = size;
		bookList = new BookVO[this.size];
	}


//	3. getters & setters 선언
	public BookVO[] getBookList() {
		return bookList;
	}
	public void setBookList(BookVO[] bookList) {
		this.bookList = bookList;
	}
	public int getSize() {
		return size;
	}
	public void setSize(int size) {
		this.size = size;
	}
	public int getIndex() {
		return index;
	}
	public void setIndex(int index) {
		this.index = index;
	}


//	4. toString() 메소드 Override
	@Override
	public String toString() {
		return "BookList [bookList=" + Arrays.toString(bookList) + "]";
	}


//	BookList 클래스의 bookList 배열에 인수로 넘겨받은 도서 정보를 저장하는 메소드
	public void addBook(BookVO book) {
//		System.out.println("book: " + book);
		
//		if를 사용하는 전통적인 예외처리 => 배열의 인덱스는 배열의 크기보다 작아야 한다.
		if(index<5) {
		bookList[index++] = book;
		} else {
			System.out.println("배열이 가득차서 " + book.getAuthor() +"의 도서 정보를 저장할 수 없습니다.");

		}
	
	}
}
