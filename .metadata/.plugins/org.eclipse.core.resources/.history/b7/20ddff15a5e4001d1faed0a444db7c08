package com.tjoeun.memoList;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

//	MemoService 클래스에서 전처리 작업이 완료돼서 넘어온 데이터로 sql 명령을 실행하는 클래스
public class MemoDAO {

//	테이블에 저장할 데이터가 저장된 MemoVO 클래스 객체를 넘겨받아 테이블에 데이터를 저장하는
//	메소드
	public static boolean insert(MemoVO vo) {
		
		boolean result = true;
		
		
//		데이터베이스 작업에 사용할 객체를 선언한다.
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		try {
//		mysql에 연결한다.
		conn = DBUtil.getMySQLConnection();
		
//		sql 명령을 만든다.
		String sql = "insert into memo (name, password, memo) values (?, ?, ?)";
		
//		sql 명령을 임시로 실행한다.
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, vo.getName()); // 어제와 달리 vo 객체 안에 정보가 저장되어 있다.
			pstmt.setString(2, vo.getPassword());
			pstmt.setString(3, vo.getMemo());
//		"?"가 채워진 sql 명령을 최종적으로 실행한다.
			pstmt.executeUpdate();
//			System.out.println(vo.getName() + "님 글 저장완료");
		} catch (SQLException e) {
//			e.printStackTrace();
//			System.out.println("sql 명령이 올바르게 실행되지 않았습니다.");
			result = false;
		} finally {
			DBUtil.close(conn);
		}
		
		return result;
		
	}
//	테이블에 저장된 메모 목록을 최신글 순으로 얻어오는 메소드
	public static ArrayList<MemoVO> select() {
		
//		데이터베이스 작업에 사용할 객체를 선언한다.
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		ArrayList<MemoVO> list = null;
		try {
//		메모 목록을 저장해서 리턴시킬 ArrayList를 선언한다.
		conn = DBUtil.getMySQLConnection();
//		sql 명령을 만든다.
		String sql = "select * from memo order by idx desc";
//		sql 명령을 임시로 실행한다.
			pstmt = conn.prepareStatement(sql);
//		select sql 명령의 실행결과를 ResultSet 객체에 저장한다.
			rs = pstmt.executeQuery();
			
//		ResultSet 객체에 데이터가 있는동안 반복하며 ResultSet 객체에 저장된 데이터를
//		MemoVO 클래스 객체로 만들어서 ArrayList에 저장한다.
//		next() 메소드는 ResultSet 객체에 저장된 다음 데이터로 접근한다.
//		next() 메소드는 다음 데이터가 있으면 true, 없으면 false를 리턴한다.
		while(rs.next()) {
//			ResultSet 객체의 데이터를 읽어서 MemoVO 클래스 객체에 저장한다.
			MemoVO vo = new MemoVO();
			vo.setIdx(rs.getInt("idx"));
			vo.setName(rs.getNString("name"));
			vo.setPassword(rs.getNString("password"));
			vo.setMemo(rs.getString("memo"));
			vo.setWriteDate(rs.getTimestamp("writDate"));
			System.out.println(vo);
			}
		} catch (SQLException e) {
//			e.printStackTrace();
			System.out.println("sql 명령이 올바르게 실행되지 않았습니다.");

		}
		return list;

		
	
	}

}
